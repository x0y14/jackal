// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: notify/v1/notify.proto

package notifyv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/x0y14/jackal/gen/notify/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotifyServiceName is the fully-qualified name of the NotifyService service.
	NotifyServiceName = "notify.v1.NotifyService"
)

// NotifyServiceClient is a client for the notify.v1.NotifyService service.
type NotifyServiceClient interface {
	FetchMessage(context.Context, *connect_go.Request[v1.FetchMessageRequest]) (*connect_go.ServerStreamForClient[v1.FetchMessageResponse], error)
}

// NewNotifyServiceClient constructs a client for the notify.v1.NotifyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotifyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotifyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notifyServiceClient{
		fetchMessage: connect_go.NewClient[v1.FetchMessageRequest, v1.FetchMessageResponse](
			httpClient,
			baseURL+"/notify.v1.NotifyService/FetchMessage",
			opts...,
		),
	}
}

// notifyServiceClient implements NotifyServiceClient.
type notifyServiceClient struct {
	fetchMessage *connect_go.Client[v1.FetchMessageRequest, v1.FetchMessageResponse]
}

// FetchMessage calls notify.v1.NotifyService.FetchMessage.
func (c *notifyServiceClient) FetchMessage(ctx context.Context, req *connect_go.Request[v1.FetchMessageRequest]) (*connect_go.ServerStreamForClient[v1.FetchMessageResponse], error) {
	return c.fetchMessage.CallServerStream(ctx, req)
}

// NotifyServiceHandler is an implementation of the notify.v1.NotifyService service.
type NotifyServiceHandler interface {
	FetchMessage(context.Context, *connect_go.Request[v1.FetchMessageRequest], *connect_go.ServerStream[v1.FetchMessageResponse]) error
}

// NewNotifyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotifyServiceHandler(svc NotifyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/notify.v1.NotifyService/FetchMessage", connect_go.NewServerStreamHandler(
		"/notify.v1.NotifyService/FetchMessage",
		svc.FetchMessage,
		opts...,
	))
	return "/notify.v1.NotifyService/", mux
}

// UnimplementedNotifyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotifyServiceHandler struct{}

func (UnimplementedNotifyServiceHandler) FetchMessage(context.Context, *connect_go.Request[v1.FetchMessageRequest], *connect_go.ServerStream[v1.FetchMessageResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("notify.v1.NotifyService.FetchMessage is not implemented"))
}
